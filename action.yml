---
name: Publish Image
description: Build and push Docker images to multiple registries

inputs:
  github_ref:
    description: "GitHub ref"
    required: true

  repository_name:
    description: "Repository name"
    required: true

  dockerfile:
    description: "Path to the Dockerfile to build"
    required: false
    default: "Dockerfile"

  context:
    description: "Path to the build context"
    required: false
    default: "."

  platforms:
    description: "Platforms to build for"
    required: false
    default: "linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6"

  dockerhub_image:
    description: "Dockerhub image name"
    required: false
  dockerhub_username:
    description: "DockerHub username"
    required: false
  dockerhub_token:
    description: "DockerHub access token"
    required: false
  dockerhub_registry:
    description: "DockerHub registry URL"
    required: false
    default: "registry.hub.docker.com"

  ghcr_image:
    description: "GitHub Container Registry image name"
    required: false
  ghcr_username:
    description: "GitHub Container Registry username"
    required: false
  ghcr_token:
    description: "GitHub Container Registry personal access token (PAT)"
    required: false
    default: secrets.GITHUB_TOKEN
  ghcr_registry:
    description: "GitHub Container Registry URL"
    required: false
    default: "ghcr.io"

  quay_image:
    description: "Quay image name"
    required: false
  quay_username:
    description: "Quay username"
    required: false
  quay_token:
    description: "Quay access token"
    required: false
  quay_registry:
    description: "Quay registry URL"
    required: false
    default: "quay.io"

  harbor_image:
    description: "Harbor image name"
    required: false
  harbor_username:
    description: "Harbor username"
    required: false
  harbor_token:
    description: "Harbor access token"
    required: false
  harbor_registry:
    description: "Harbor registry URL"
    required: false
    default: "goharbor.io"

  ecr_image:
    description: "ECR image name"
    required: false
  ecr_access_key_id:
    description: "ECR access key ID"
    required: false
  ecr_secret_access_key:
    description: "ECR secret access key"
    required: false
  ecr_region:
    description: "ECR region"
    required: false
    default: "us-east-1"
  ecr_registry:
    description: "ECR registry URL"
    required: false

  custom_image:
    description: "Custom registry image name"
    required: false
  custom_username:
    description: "Custom registry username"
    required: false
  custom_token:
    description: "Custom registry access token"
    required: false
  custom_registry:
    description: "Custom registry URL"
    required: false

outputs:
  dockerhub:
    description: "Whether or not to push to DockerHub"
    value: ${{ steps.customvars.outputs.dockerhub }}
  dockerhub_image:
    description: "DockerHub image name"
    value: ${{ steps.customvars.outputs.dockerhub_image }}

  ghcr:
    description: "Whether or not to push to GitHub Container Registry"
    value: ${{ steps.customvars.outputs.ghcr }}
  ghcr_image:
    description: "GitHub Container Registry image name"
    value: ${{ steps.customvars.outputs.ghcr_image }}

  quay:
    description: "Whether or not to push to Quay"
    value: ${{ steps.customvars.outputs.quay }}
  quay_image:
    description: "Quay image name"
    value: ${{ steps.customvars.outputs.quay_image }}

  harbor:
    description: "Whether or not to push to Harbor"
    value: ${{ steps.customvars.outputs.harbor }}
  harbor_image:
    description: "Harbor image name"
    value: ${{ steps.customvars.outputs.harbor_image }}

  ecr:
    description: "Whether or not to push to ECR"
    value: ${{ steps.customvars.outputs.ecr }}
  ecr_image:
    description: "ECR image name"
    value: ${{ steps.customvars.outputs.ecr_image }}
  ecr_image_url:
    description: "ECR image URL"
    value: ${{ steps.ecr.outputs.imageUrl }}

  custom:
    description: "Whether or not to push to a custom registry"
    value: ${{ steps.customvars.outputs.custom }}
  custom_image:
    description: "Custom registry image name"
    value: ${{ steps.customvars.outputs.custom_image }}

runs:
  using: "composite"
  env:
    inputs_github_ref: ${{ inputs.github_ref }}
    inputs_repository_name: ${{ inputs.repository.name }}
    inputs_platforms: ${{ inputs.platforms }}
    inputs_context: ${{ inputs.context }}
    inputs_dockerfile: ${{ inputs.dockerfile }}

    inputs_dockerhub_username: ${{ inputs.dockerhub_username }}
    inputs_dockerhub_token: ${{ inputs.dockerhub_token }}
    inputs_dockerhub_image: ${{ inputs.dockerhub_image }}
    inputs_dockerhub_registry: ${{ inputs.dockerhub_registry }}

    inputs_ghcr_username: ${{ inputs.ghcr_username }}
    inputs_ghcr_token: ${{ inputs.ghcr_token }}
    inputs_ghcr_image: ${{ inputs.ghcr_image }}
    inputs_ghcr_registry: ${{ inputs.ghcr_registry }}

    inputs_quay_username: ${{ inputs.quay_username }}
    inputs_quay_token: ${{ inputs.quay_token }}
    inputs_quay_image: ${{ inputs.quay_image }}
    inputs_quay_registry: ${{ inputs.quay_registry }}

    inputs_harbor_username: ${{ inputs.harbor_username }}
    inputs_harbor_token: ${{ inputs.harbor_token }}
    inputs_harbor_image: ${{ inputs.harbor_image }}
    inputs_harbor_registry: ${{ inputs.harbor_registry }}

    inputs_ecr_access_key_id: ${{ inputs.ecr_access_key_id }}
    inputs_ecr_secret_access_key: ${{ inputs.ecr_secret_access_key }}
    inputs_ecr_region: ${{ inputs.ecr_region }}
    inputs_ecr_image: ${{ inputs.ecr_image }}
    inputs_ecr_registry: ${{ inputs.ecr_registry }}

    inputs_custom_username: ${{ inputs.custom_username }}
    inputs_custom_token: ${{ inputs.custom_token }}
    inputs_custom_image: ${{ inputs.custom_image }}
    inputs_custom_registry: ${{ inputs.custom_registry }}

  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # pin@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # pin@v2

    - name: Custom Variables
      id: customvars
      shell: bash
      run: |
        (
          github_ref="${inputs_github_ref}"
          repository_name="${inputs_repository_name}"

          platforms="${inputs_platforms}"
          context="${inputs.context}"
          dockerfile="${inputs_dockerfile}"

          dockerhub_username="${inputs_dockerhub_username}"
          dockerhub_token="${inputs_dockerhub_token}"
          dockerhub_image="${inputs_dockerhub_image}"
          dockerhub_registry="${inputs_dockerhub_registry}"

          ghcr_username="${inputs_ghcr_username}"
          ghcr_token="${inputs_ghcr_token}"
          ghcr_image="${inputs_ghcr_image}"
          ghcr_registry="${inputs_ghcr_registry}"

          quay_username="${inputs_quay_username}"
          quay_token="${inputs_quay_token}"
          quay_image="${inputs_quay_image}"
          quay_registry="${inputs_quay_registry}"

          harbor_username="${inputs_harbor_username}"
          harbor_token="${inputs_harbor_token}"
          harbor_image="${inputs_harbor_image}"
          harbor_registry="${inputs_harbor_registry}"

          ecr_access_key_id="${inputs_ecr_access_key_id}"
          ecr_secret_access_key="${inputs_ecr_secret_access_key}"
          ecr_region="${inputs_ecr_region}"
          ecr_image="${inputs_ecr_image}"
          ecr_registry="${inputs_ecr_registry}"

          custom_username="${inputs_custom_username}"
          custom_token="${inputs_custom_token}"
          custom_image="${inputs_custom_image}"
          custom_registry="${inputs_custom_registry}"

          echo -n "is_release="
          if [[ "${github_ref}" =~ refs/tags/v[1-9].* ]] ; then
            echo "true"
          else
            echo "false"
          fi

          echo "platforms=${platforms:-linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6}"
          echo "context=${context:-.}
          echo "dockerfile=${dockerfile:-${context}/Dockerfile}"

          echo -n "dockerhub="
          if [ -n "${dockerhub_username}" ] \
          && [ -n "${dockerhub_token}" ] ; then
            echo "true"
          else
            echo "false"
          fi

          echo "dockerhub_image=${dockerhub_image:-${dockerhub_username}/${repository_name}}"
          echo "dockerhub_registry=${dockerhub_registry:-registry.hub.docker.com}"

          echo -n "ghcr="
          if [ -n "${inputs_ghcr_username}" ] \
          && [ -n "${inputs_ghcr_token}" ] ; then
            echo "true"
          else
            echo "false"
          fi

          echo "ghcr_image=${ghcr_image:-${ghcr_username}/${repository_name}}"
          echo "ghcr_registry=${ghcr_registry:-ghcr.io}"

          echo -n "quay="
          if [ -n "${inputs_quay_username}" ] \
            && [ -n "${inputs_quay_token}" ] ; then
              echo "quay=true"
            else
              echo "quay=false"
            fi

          echo "quay_image=${quay_image:-${quay_username}/${repository_name}}"
          echo "quay_registry=${quay_registry:-quay.io}"

          echo -n "harbor="
          if [ -n "${inputs_harbor_username}" ] \
          && [ -n "${inputs_harbor_token}" ] ; then
            echo "harbor=true"
          else
            echo "harbor=false"
          fi

          echo "harbor_image=${harbor_image:-${harbor_username}/${repository_name}}"
          echo "harbor_registry=${harbor_registry:-goharbor.io}"

          echo -n "ecr="
          if [ -n "${inputs_ecr_access_key_id}" ] \
          && [ -n "${inputs_ecr_secret_access_key}" ] \
          && [ -n "${inputs_ecr_region}" ] ; then
            echo "ecr=true"
          else
            echo "ecr=false"
          fi

          echo "ecr_region=${ecr_region:-us-east-1}"
          echo "ecr_image=${ecr_image:-${repository_name}}"
          echo "ecr_registry=${ecr_registry:-dkr.ecr.${ecr_region}.amazonaws.com}"

          echo -n "custom="
          if [ -n "${inputs_custom_username}" ] \
          && [ -n "${inputs_custom_token}" ] ; then
            echo "custom=true"
          else
            echo "custom=false"
          fi

          echo "custom_image=${custom_image:-${custom_username}/${repository_name}}"
          echo "custom_registry=${custom_registry:-localhost:5000}"

        ) >> "$GITHUB_OUTPUT"

      ## Login to DockerHub, GitHub Packages, Quay, Harbor, and Custom registries
    - name: Login to DockerHub
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # pin@v2
      if: ${{ steps.customvars.outputs.dockerhub == 'true' }}
      with:
        username: "${{ steps.customvars.outputs.dockerhub_username }}"
        password: "${{ steps.customvars.outputs.dockerhub_token }}"
        registry: "${{ steps.customvars.outputs.dockerhub_registry }}"

    - name: Login to GitHub Packages
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # pin@v2
      if: ${{ steps.customvars.outputs.ghcr == 'true' }}
      with:
        username: "${{ steps.customvars.outputs.ghcr_username }}"
        password: "${{ steps.customvars.outputs.ghcr_token }}"
        registry: "${{ steps.customvars.outputs.ghcr_registry }}"

    - name: Login to Quay
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # pin@v2
      if: ${{ steps.customvars.outputs.quay == 'true' }}
      with:
        username: "${{ steps.customvars.outputs.quay_username }}"
        password: "${{ steps.customvars.outputs.quay_token }}"
        registry: "${{ steps.customvars.outputs.quay_registry }}"

    - name: Login to Harbor
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # pin@v2
      if: ${{ steps.customvars.outputs.harbor == 'true' }}
      with:
        username: "${{ steps.customvars.outputs.harbor_username }}"
        password: "${{ steps.customvars.outputs.harbor_token }}"
        registry: "${{ steps.customvars.outputs.harbor_registry }}"

    - name: Login to ECR
      id: ecr
      uses: jwalton/gh-ecr-login@8f09f5bf7451d6b8e3f458240eb4026f9476a18d # pin@v3.0.1
      with:
        access-key-id: "${{ steps.customvars.outputs.ecr_access_key_id }}"
        secret-access-key: "${{ steps.customvars.outputs.ecr_secret_access_key }}"
        region: "${{ steps.customvars.outputs.ecr_region }}"

    - name: Login to Custom registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # pin@v2
      if: ${{ steps.customvars.outputs.custom == 'true' }}
      with:
        username: "${{ steps.customvars.outputs.custom_username }}"
        password: "${{ steps.customvars.outputs.custom_token }}"
        registry: "${{ steps.customvars.outputs.custom_registry }}"

    # Set image metadata and tags
    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # pin@v5
      with:
        images: |
          name=${{ steps.customvars.outputs.docker_registry }}/${{ steps.customvars.outputs.dockerhub_image }},enable=${{ steps.customvars.outputs.dockerhub == 'true' }}
          name=${{ steps.customvars.outputs.ghcr_registry }}/${{ steps.customvars.outputs.ghcr_image }},enable=${{ steps.customvars.outputs.ghcr == 'true' }}
          name=${{ steps.customvars.outputs.quay_registry }}/${{ steps.customvars.outputs.quay_image }},enable=${{ steps.customvars.outputs.quay == 'true' }}
          name=${{ steps.customvars.outputs.harbor_registry }}/${{ steps.customvars.outputs.harbor_image }},enable=${{ steps.customvars.outputs.harbor == 'true' }}
          name=${{ steps.customvars.outputs.custom_registry }}/${{ steps.customvars.outputs.custom_image }},enable=${{ steps.customvars.outputs.custom == 'true' }}
          name=${{ steps.ecr.outputs.account }}.${{ steps.customvars.outputs.ecr_registry }}/${{ steps.customvars.outputs.ecr_image }},enable=${{ steps.customvars.outputs.ecr == 'true' }}

        tags: |
          type=raw,value=latest,enable=${{ steps.customvars.outputs.is_release == 'true' }}
          type=semver,pattern={{version}},enable=${{ steps.customvars.outputs.is_release == 'true' }}
          type=semver,pattern={{major}},enable=${{ steps.customvars.outputs.is_release == 'true' }}
          type=semver,pattern={{major}}.{{minor}},enable=${{ steps.customvars.outputs.is_release == 'true' }}
          type=edge,branch=main
          type=sha
          type=sha,format=long
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

    # Build and push images
    - name: Build and push
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # pin@v6.15.0
      id: build-push
      with:
        push: true
        sbom: true
        context: ${{ steps.customvars.outputs.context }}
        file: ${{ steps.customvars.outputs.dockerfile }}
        platforms: ${{ steps.customvars.outputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}

    # Generate SBOMs for DockerHub, GHCR, Quay, Harbor, ECR, and custom registries
    - name: Generate SBOM for DockerHub image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.dockerhub == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.docker_registry }}/${{ steps.customvars.outputs.dockerhub_image }}
        format: cyclonedx-json
        output-file: dockerhub-sbom.cyclonedx.json

    - name: Generate SBOM for GHCR image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.dockerhub == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.ghcr_registry }}/${{ steps.customvars.outputs.ghcr_image }}
        format: cyclonedx-json
        output-file: ghcr-sbom.cyclonedx.json

    - name: Generate SBOM for Quay image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.quay == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.quay_registry }}/${{ steps.customvars.outputs.quay_image }}
        format: cyclonedx-json
        output-file: quay-sbom.cyclonedx.json

    - name: Generate SBOM for Harbor image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.harbor == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.harbor_registry }}/${{ steps.customvars.outputs.harbor_image }}
        format: cyclonedx-json
        output-file: harbor-sbom.cyclonedx.json

    - name: Generate SBOM for ECR image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.ecr == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.ecr_registry }}/${{ steps.customvars.outputs.ecr_image }}
        format: cyclonedx-json
        output-file: ecr-sbom.cyclonedx.json

    - name: Generate SBOM for custom image
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin @v0.18.0
      if: ${{ steps.customvars.outputs.custom == 'true' }}
      with:
        image: ${{ steps.customvars.outputs.custom_registry }}/${{ steps.customvars.outputs.custom_image }}
        format: cyclonedx-json
        output-file: custom-sbom.cyclonedx.json

    # Attest to images' SBOMs
    - name: Generate SBOM attestation for DockerHub
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.dockerhub == 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.docker_registry }}/${{ steps.customvars.outputs.dockerhub_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: dockerhub-sbom.cyclonedx.json

    - name: Generate SBOM attestation for GHCR
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.ghcr == 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.ghcr_registry }}/${{ steps.customvars.outputs.ghcr_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: ghcr-sbom.cyclonedx.json

    - name: Generate SBOM attestation for Quay
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.quay == 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.quay_registry }}/${{ steps.customvars.outputs.quay_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: quay-sbom.cyclonedx.json

    - name: Generate SBOM attestation for Harbor
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.harbor== 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.harbor_registry }}/${{ steps.customvars.outputs.harbor_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: harbor-sbom.cyclonedx.json

    - name: Generate SBOM attestation for ECR
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.ecr == 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.ecr_registry }}/${{ steps.customvars.outputs.ecr_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: ecr-sbom.cyclonedx.json

    - name: Generate SBOM attestation for custom registries
      uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # pin@v2.2.0
      if: ${{ steps.customvars.outputs.custom == 'true' }}
      with:
        subject-name: ${{ steps.customvars.outputs.custom_registry }}/${{ steps.customvars.outputs.custom_image }}
        subject-digest: "sha256:${{ steps.build-push.outputs.digest }}"
        push-to-registry: true
        sbom-path: custom-sbom.cyclonedx.json

    # Update image descriptions (DockerHub, Quay, and Harbor only)
    - name: update DockerHub description
      uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # pin@v1
      if: ${{ steps.customvars.outputs.dockerhub == 'true' }}
      with:
        destination_container_repo: ${{ steps.customvars.outputs.dockerhub_image }}
        provider: dockerhub
      env:
        DOCKER_USER: ${{ secrets.dockerhub_username }}
        DOCKER_PASS: ${{ secrets.dockerhub_token }}

    - name: update Quay description
      uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # pin@v1
      if: ${{ steps.customvars.outputs.quay == 'true' }}
      with:
        destination_container_repo: ${{ steps.customvars.outputs.quay_image }}
        provider: quay
      env:
        DOCKER_APIKEY: ${{ secrets.quay_token }}

    - name: update Harbor description
      uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # pin@v1
      if: ${{ steps.customvars.outputs.harbor == 'true' }}
      with:
        destination_container_repo: ${{ steps.customvars.outputs.harbor_image }}
        provider: harbor2
      env:
        DOCKER_USER: ${{ secrets.harbor_username }}
        DOCKER_PASS: ${{ secrets.harbor_token }}
